####################################################################################################
# 1. Regras de Associação:
# 1.1. Apriori
base = read.arff(file.choose())
####################################################################################################
# 1. Regras de Associação:
# 1.1. Apriori
install.packages("foreign")
library(foreign)
base = read.arff(file.choose())
View(base)
base$department1=NULL
base$department2=NULL
base$department3=NULL
base$department4=NULL
base$department5=NULL
base$department6=NULL
base$department7=NULL
base$department8=NULL
base$department9=NULL
base$department10=NULL
base$department11=NULL
base$department9=NULL;base$department10=NULL;base$department11=NULL;base$department100=NULL
base$department101=NULL,base$department102=NULL,base$department103=NULL,base$department104=NULL
base$department101=NULL;base$department102=NULL;base$department103=NULL;base$department104=NULL
base$department105=NULL;base$department106=NULL;base$department107=NULL;base$department108=NULL
log(base[,c(-200,-201,-202)])
base[,-200:-202]
View(base)
base = read.arff(file.choose())
base = read.arff(file.choose())
base = read.arff(file.choose())
View(base)
install.packages("arules")
#install.packages("arules")
library(arules)
summary(base)
itemFrequencyPlot(base)
base1 = as.data.frame(base)
summary(base1)
itemFrequencyPlot(base1)
regras = apriori(base, parameter = list(support=0.7, confidenci=0.8))
#install.packages("arules")
library(arules)
base = read.transactions(file.choose(),header = F, sep = ",")
View(base1)
summary(base)
itemFrequencyPlot(base)
itemFrequencyPlot(base, top=7)
regras = apriori(base, parameter = list(support=0.7, confidenci=0.8))
regras = apriori(base, parameter = list(sup=0.7, conf=0.8))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.5, conf=0.8))
regras = apriori(base, parameter = list(sup=0.2, conf=0.8))
regras = apriori(base, parameter = list(sup=0.2, conf=0.5))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.002, conf=0.5))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.002, conf=0.3))
regras = apriori(base, parameter = list(sup=0.002, conf=0.2))
inspect(regras)
base = read.transactions(file.choose(),header = F, sep = ",")
base = read.transactions(file.choose(),header = F, sep = ",")
summary(base)
itemFrequencyPlot(base)
itemFrequencyPlot(base, top=7)
regras = apriori(base, parameter = list(sup=0.5, conf=0.8))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.3, conf=0.8))
regras = apriori(base, parameter = list(sup=0.3, conf=0.5))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.1, conf=0.5))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.1, conf=0.6))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.1, conf=0.7))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.1, conf=0.8))
inspect(regras)
itemFrequencyPlot(base,top=5)
base = read.transactions(file.choose(),header = F)
summary(base)
itemFrequencyPlot(base)
itemFrequencyPlot(base,top=5)
base = read.transactions(file.choose(),header = F,sep = ",")
summary(base)
itemFrequencyPlot(base)
itemFrequencyPlot(base,top=5)
regras = apriori(base, parameter = list(sup=0.1, conf=0.8))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.3, conf=0.8))
regras = apriori(base, parameter = list(sup=0.6, conf=0.8))
summary(base)
3 * 3
9 / 20
regras = apriori(base, parameter = list(sup=0.45, conf=0.8))
3 * 2
6 / 20
regras = apriori(base, parameter = list(sup=0.3, conf=0.8))
4 / 20
regras = apriori(base, parameter = list(sup=0.2, conf=0.8))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.2, conf=0.7))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.2, conf=0.5))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.6, conf=0.8))
inspect(regras)
base1 = read.transactions(file.choose(),header = F,sep = ",",rm.duplicates = T)
summary(base1)
itemFrequencyPlot(base1)
itemFrequencyPlot(base1,top=5)
regras1 = apriori(base1, parameter = list(supp=0.7, conf=0.9))
regras1 = apriori(base1, parameter = list(sup=0.7, conf=0.9))
regras1 = apriori(base1, parameter = list(sup=0.7, conf=0.8))
regras1 = apriori(base1, parameter = list(sup=0.5, conf=0.8))
regras1 = apriori(base1, parameter = list(sup=0.4, conf=0.8))
regras1 = apriori(base1, parameter = list(sup=0.2, conf=0.8))
regras1 = apriori(base1, parameter = list(sup=0.1, conf=0.8))
regras1 = apriori(base1, parameter = list(sup=0.1, conf=0.5))
5 * 14
summary(base1)
70 / 7501
regras1 = apriori(base1, parameter = list(sup=0.009, conf=0.8))
inspect(regras1)
regras1 = apriori(base1, parameter = list(sup=0.009, conf=0.5))
inspect(regras1)
regras1 = apriori(base1, parameter = list(sup=0.003, conf=0.5))
inspect(regras1)
regras1 = apriori(base1, parameter = list(sup=0.003, conf=0.3))
inspect(regras1)
regras1 = apriori(base1, parameter = list(sup=0.002, conf=0.3))
inspect(regras1)
regras1 = apriori(base1, parameter = list(sup=0.003, conf=0.3))
3 * 14
42 / 7501
regras1 = apriori(base1, parameter = list(sup=0.005, conf=0.3))
inspect(regras1)
regras1 = apriori(base1, parameter = list(sup=0.005, conf=0.8))
regras1 = apriori(base1, parameter = list(sup=0.005, conf=0.3))
inspect(regras1)
inspect(sort(regras1, by=["lift"]))
inspect(sort(regras1, by="lift"))
inspect(sort(regras1, by="lift"))[1:30]
inspect(sort(regras1, by="lift"),[1:30])
inspect(sort(regras1, by="lift")[1:30])
inspect(sort(regras1, by="confidence")[1:30])
3 * 14
42 / 7501
12 / 7501
regras1 = apriori(base1, parameter = list(sup=0.001, conf=0.8))
inspect(regras1)
inspect(sort(regras1, by="confidence")[1:30])
View(regras1)
regras = apriori(base, parameter = list(sup=0.6, conf=0.8))
#install.packages("arules")
library(arules)
base = read.transactions(file.choose(),header = F,sep = ",",rm.duplicates = T)
summary(base)
itemFrequencyPlot(base)
itemFrequencyPlot(base,top=5)
regras = apriori(base, parameter = list(sup=0.6, conf=0.8))
regras = apriori(base, parameter = list(sup=0.4, conf=0.7))
regras = apriori(base, parameter = list(sup=0.1, conf=0.5))
inspect(regras)
regras = apriori(base, parameter = list(sup=0.1, conf=0.8))
inspect(regras)
base1 = read.transactions(file.choose(),header = F,sep = ",",rm.duplicates = T)
summary(base1)
itemFrequencyPlot(base1)
itemFrequencyPlot(base1,top=5)
itemFrequencyPlot(base1,top=10)
regras1 = apriori(base1, parameter = list(sup=0.5, conf=0.8))
regras1 = apriori(base1, parameter = list(sup=0.4, conf=0.8))
4 * 3
12 / 7501
regras1 = apriori(base1, parameter = list(sup=0.001, conf=0.8))
inspect(regras1)
regras1 = apriori(base1, parameter = list(sup=0.001, conf=0.5))
inspect(regras1)
inspect(sort(regras1, by="confidence")[1:30])
inspect(sort(regras1, by="confidence")[30:60])
library(arulesViz)
plot(regras, method="graph")
library(arulesViz)
plot(regras, method="graph")
library(arulesViz)
plot(regras, method="graph")
library(arulesViz)
install.packages("seriation")
library(seriation)
install.packages("arulesViz", dependencies = T)
library(arulesViz)
setwd("~/Área de Trabalho/RStudio/R - Avançado - Data Mining")
base = read.transactions("GroceryStoreDataSet.csv", header = F, sep = ",", rm.duplicates = T)
image(base)
itemSet = eclat(base, parameter = list(support=0.5))
inspect(itemSet)
itemSet = eclat(base, parameter = list(support=0.3))
inspect(itemSet)
itemSet= eclat(base, parameter = list(support=0.2 ,maxlen=2))
inspect(itemSet)
itemSet= eclat(base, parameter = list(support=0.01 ,minlen=2))
inspect(itemSet)
inspect(sort(itemSet, by="support")
inspect(sort(itemSet, by="support"))
inspect(itemSet)
itemSet= eclat(base, parameter = list(support=0.25 ,minlen=2))
itemSet= eclat(base, parameter = list(support=0.2 ,minlen=2))
itemSet= eclat(base, parameter = list(support=0.18 ,minlen=2))
itemSet= eclat(base, parameter = list(support=0.15 ,minlen=2))
inspect(itemSet)
inspect(sort(itemSet))
